# -*- coding: utf-8 -*-

"""
reloadlysdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from reloadlysdk.api_helper import APIHelper
from reloadlysdk.configuration import Server
from reloadlysdk.controllers.base_controller import BaseController
from reloadlysdk.exceptions.api_exception import APIException


class AirtimeFXRatesController(BaseController):

    """A Controller to access Endpoints in the reloadlysdk API."""
    def __init__(self, config):
        super(AirtimeFXRatesController, self).__init__(config)

    def reloadly_airtime_fx_rates(self,
                                  accept,
                                  authorization,
                                  body):
        """Does a POST request to /operators/fx-rate.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here. Example:
                application/com.reloadly.topups-v1+json
            authorization (string): TODO: type description here.
            body (object): Payload description

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/operators/fx-rate'
        _query_builder = self.config.get_base_uri(Server.AIRTIME)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization,
            'Content-Type': 'application/json'
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Not Found', _response)
        elif _response.status_code == 500:
            raise APIException('Fx rate is currently not available for this operator, please try again later or contact support.', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded
