# -*- coding: utf-8 -*-

"""
reloadlysdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from reloadlysdk.api_helper import APIHelper
from reloadlysdk.configuration import Server
from reloadlysdk.controllers.base_controller import BaseController
from reloadlysdk.exceptions.api_exception import APIException


class GiftCardsProductsController(BaseController):

    """A Controller to access Endpoints in the reloadlysdk API."""
    def __init__(self, config):
        super(GiftCardsProductsController, self).__init__(config)

    def reloadly_gift_cards_products(self,
                                     accept,
                                     authorization,
                                     include_range=None,
                                     include_fixed=None,
                                     size=None,
                                     page=None,
                                     product_name=None,
                                     country_code=None):
        """Does a GET request to /products.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here.
            authorization (string): TODO: type description here.
            include_range (bool, optional): Indicates the list of gift card
                products with the denominationType property specified as RANGE
                are to be retrieved.
            include_fixed (bool, optional): Indicates the list of gift card
                products with the denominationType property specified as FIXED
                are to be retrieved.
            size (int, optional): This indicates the number of gift card
                products to be retrieved on a page.
            page (string, optional): This indicates the page of the product
                list being retrieved.
            product_name (string, optional): Indicates the name of the gift
                card product.
            country_code (string, optional): Indicates the ISO code of the
                country whose gift card products are to be retrieved.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/products'
        _query_builder = self.config.get_base_uri(Server.GIFT_CARDS)
        _query_builder += _url_path
        _query_parameters = {
            'includeRange': include_range,
            'includeFixed': include_fixed,
            'size': size,
            'page': page,
            'productName': product_name,
            'countryCode': country_code
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Not Found', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded

    def reloadly_gift_cards_product_by_id(self,
                                          accept,
                                          authorization,
                                          productid):
        """Does a GET request to /products/{productid}.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here.
            authorization (string): TODO: type description here.
            productid (int): The product's identification number.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/products/{productid}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'productid': {'value': productid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri(Server.GIFT_CARDS)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 400:
            raise APIException('The product was either not found or is no longer available, Please contact support', _response)
        elif _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Not found', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded

    def reloadly_gift_cards_product_by_iso(self,
                                           accept,
                                           authorization,
                                           countrycode):
        """Does a GET request to /countries/{countrycode}/products.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here.
            authorization (string): TODO: type description here.
            countrycode (string): The ISO code of the country you want to
                display available gift cards for.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/countries/{countrycode}/products'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'countrycode': {'value': countrycode, 'encode': True}
        })
        _query_builder = self.config.get_base_uri(Server.GIFT_CARDS)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Country not found and/or not currently supported', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded
