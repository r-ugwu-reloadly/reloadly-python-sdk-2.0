# -*- coding: utf-8 -*-

"""
reloadlysdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from reloadlysdk.api_helper import APIHelper
from reloadlysdk.configuration import Server
from reloadlysdk.controllers.base_controller import BaseController
from reloadlysdk.exceptions.api_exception import APIException


class AirtimePromotionsController(BaseController):

    """A Controller to access Endpoints in the reloadlysdk API."""
    def __init__(self, config):
        super(AirtimePromotionsController, self).__init__(config)

    def reloadly_airtime_promotions(self,
                                    accept,
                                    authorization,
                                    size=None,
                                    page=None,
                                    language_code=None):
        """Does a GET request to /promotions.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here.
            authorization (string): TODO: type description here.
            size (int, optional): This indicates the number of promotions to
                be retrieved on a page. Default value is 200.
            page (int, optional): This indicates the page of the promotions
                list being retrieved. Default value is 1.
            language_code (int, optional): This indicates the language you
                want the promotion information to be displayed in. The
                language code is to be specified in the ISO 639-1 format.
                Choices are 'EN', 'ES', 'FR', 'IT', 'PT', 'ZH', 'AR', 'HI',
                'HT', 'JA' and 'DE'. Default is 'EN'. This is a
                case-insensitive field. The promotion information is returned
                in your requested language irrespective of the original
                language in which the promotion was launched.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/promotions'
        _query_builder = self.config.get_base_uri(Server.AIRTIME)
        _query_builder += _url_path
        _query_parameters = {
            'size': size,
            'page': page,
            'languageCode': language_code
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Not Found', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded

    def reloadly_airtime_promotion_by_id(self,
                                         accept,
                                         authorization,
                                         promotionid,
                                         language_code=None):
        """Does a GET request to /promotions/{promotionid}.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here.
            authorization (string): TODO: type description here.
            promotionid (string): The promotion's identification number.
            language_code (string, optional): This indicates the language you
                want the promotion information to be displayed in. The
                language code is to be specified in the ISO 639-1 format.
                Choices are 'EN', 'ES', 'FR', 'IT', 'PT', 'ZH', 'AR', 'HI',
                'HT', 'JA' and 'DE'. Default is 'EN'. This is a
                case-insensitive field. The promotion information is returned
                in your requested language irrespective of the original
                language in which the promotion was launched.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/promotions/{promotionid}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'promotionid': {'value': promotionid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri(Server.AIRTIME)
        _query_builder += _url_path
        _query_parameters = {
            'languageCode': language_code
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Promotion not found', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded

    def reloadly_airtime_promotion_by_iso(self,
                                          accept,
                                          authorization,
                                          countrycode):
        """Does a GET request to /promotions/country-codes/{countrycode}.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here.
            authorization (string): TODO: type description here.
            countrycode (string): TODO: type description here.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/promotions/country-codes/{countrycode}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'countrycode': {'value': countrycode, 'encode': True}
        })
        _query_builder = self.config.get_base_uri(Server.AIRTIME)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Not Found', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded

    def reloadly_airtime_promotion_by_operator_id(self,
                                                  accept,
                                                  authorization,
                                                  operatorid):
        """Does a GET request to /promotions/operators/{operatorid}.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here.
            authorization (string): TODO: type description here.
            operatorid (string): TODO: type description here.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/promotions/operators/{operatorid}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'Authorization': {'value': authorization, 'encode': True},
            'operatorid': {'value': operatorid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri(Server.AIRTIME)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Not Found', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded
