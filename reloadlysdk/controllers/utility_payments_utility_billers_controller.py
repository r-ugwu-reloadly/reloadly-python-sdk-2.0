# -*- coding: utf-8 -*-

"""
reloadlysdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from reloadlysdk.api_helper import APIHelper
from reloadlysdk.configuration import Server
from reloadlysdk.controllers.base_controller import BaseController
from reloadlysdk.exceptions.api_exception import APIException


class UtilityPaymentsUtilityBillersController(BaseController):

    """A Controller to access Endpoints in the reloadlysdk API."""
    def __init__(self, config):
        super(UtilityPaymentsUtilityBillersController, self).__init__(config)

    def reloadly_utility_payments_billers(self,
                                          accept,
                                          authorization,
                                          id=None,
                                          name=None,
                                          mtype=None,
                                          service_type=None,
                                          country_iso_code=None,
                                          page=None,
                                          size=None):
        """Does a GET request to /billers.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here.
            authorization (string): TODO: type description here.
            id (int, optional): This is the unique identification number of
                each biller. It uniquely identifies the biller servicing the
                utility.
            name (string, optional): This indicates the biller's name. In
                situations where the biller's name is exceptionally long,
                partial names are used.
            mtype (string, optional): This indicates the type of utility
                payment handled by the biller. Values included are
                ELECTRICITY_BILL_PAYMENT, WATER_BILL_PAYMENT, TV_BILL_PAYMENT
                and INTERNET_BILL_PAYMENT.
            service_type (string, optional): This indicates the payment
                service type being rendered by the utility biller service.
                Examples are PREPAID and POSTPAID.
            country_iso_code (string, optional): This indicates the ISO code
                of the country where the utility biller is operating in.
            page (int, optional): This indicates the page of the billers list
                being retrieved. Default value is 1.
            size (int, optional): This indicates the number of billers to be
                retrieved on a page. Default value is 200.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/billers'
        _query_builder = self.config.get_base_uri(Server.UTILITY_PAYMENTS)
        _query_builder += _url_path
        _query_parameters = {
            'id': id,
            'name': name,
            'type': mtype,
            'serviceType': service_type,
            'countryISOCode': country_iso_code,
            'page': page,
            'size': size
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Not Found', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded
