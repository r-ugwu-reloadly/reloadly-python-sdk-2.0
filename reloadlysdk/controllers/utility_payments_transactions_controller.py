# -*- coding: utf-8 -*-

"""
reloadlysdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from reloadlysdk.api_helper import APIHelper
from reloadlysdk.configuration import Server
from reloadlysdk.controllers.base_controller import BaseController
from reloadlysdk.exceptions.api_exception import APIException


class UtilityPaymentsTransactionsController(BaseController):

    """A Controller to access Endpoints in the reloadlysdk API."""
    def __init__(self, config):
        super(UtilityPaymentsTransactionsController, self).__init__(config)

    def reloadly_utility_payments_transactions(self,
                                               accept,
                                               authorization,
                                               reference_id=None,
                                               page=None,
                                               size=None,
                                               start_date=None,
                                               end_date=None,
                                               status=None,
                                               service_type=None,
                                               biller_type=None,
                                               biller_country_code=None):
        """Does a GET request to /transactions.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here.
            authorization (string): TODO: type description here.
            reference_id (string, optional): The reference ID you may have
                specified while placing the transaction.
            page (int, optional): The page to be retrieved from the
                transaction list.
            size (int, optional): Number of items to include in a single
                page.
            start_date (string, optional): Indicates the start date for the
                range of transactions to be retrieved.
            end_date (string, optional): Indicates the end date for the range
                of transactions to be retrieved.
            status (string, optional): The transaction's status. Can be either
                PROCESSING, SUCCESSFUL, FAILED, or REFUNDED.
            service_type (string, optional): The biller's service type. Can be
                either PREPAID or POSTPAID.
            biller_type (string, optional): The biller's type. Can be either
                ELECTRICITY_BILL_PAYMENT, WATER_BILL_PAYMENT, TV_BILL_PAYMENT,
                or INTERNET_BILL_PAYMENT
            biller_country_code (string, optional): Indicates the ISO code of
                the country where the biller is located.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/transactions'
        _query_builder = self.config.get_base_uri(Server.UTILITY_PAYMENTS)
        _query_builder += _url_path
        _query_parameters = {
            'referenceId': reference_id,
            'page': page,
            'size': size,
            'startDate': start_date,
            'endDate': end_date,
            'status': status,
            'serviceType': service_type,
            'billerType': biller_type,
            'billerCountryCode': biller_country_code
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Not Found', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded

    def reloadly_utility_payments_transaction_by_id(self,
                                                    accept,
                                                    authorization,
                                                    id):
        """Does a GET request to /transactions/{id}.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here.
            authorization (string): TODO: type description here.
            id (int): The utility payment's identification number.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/transactions/{id}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'id': {'value': id, 'encode': True}
        })
        _query_builder = self.config.get_base_uri(Server.UTILITY_PAYMENTS)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Not found', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded
