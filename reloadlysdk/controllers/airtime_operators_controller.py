# -*- coding: utf-8 -*-

"""
reloadlysdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from reloadlysdk.api_helper import APIHelper
from reloadlysdk.configuration import Server
from reloadlysdk.controllers.base_controller import BaseController
from reloadlysdk.exceptions.api_exception import APIException


class AirtimeOperatorsController(BaseController):

    """A Controller to access Endpoints in the reloadlysdk API."""
    def __init__(self, config):
        super(AirtimeOperatorsController, self).__init__(config)

    def reloadly_airtime_operators(self,
                                   accept,
                                   authorization,
                                   include_bundles=None,
                                   include_data=None,
                                   suggested_amounts_map=None,
                                   size=None,
                                   page=None):
        """Does a GET request to /operators.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here. Example:
                application/com.reloadly.topups-v1+json
            authorization (string): TODO: type description here.
            include_bundles (string, optional): Indicates if any airtime and
                data bundles being offered by the operator should be included
                in the API response. Default value is true.
            include_data (string, optional): Indicates if any airtime or data
                plans being offered by the operator should be included in the
                API response. Default value is true.
            suggested_amounts_map (string, optional): Indicates if this field
                should be returned as a response. Default value is false.
            size (string, optional): This indicates the number of operators to
                be retrieved on a page. Default value is 200.
            page (string, optional): This indicates the page of the operator
                list being retrieved. Default value is 1.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/operators'
        _query_builder = self.config.get_base_uri(Server.AIRTIME)
        _query_builder += _url_path
        _query_parameters = {
            'includeBundles': include_bundles,
            'includeData': include_data,
            'suggestedAmountsMap': suggested_amounts_map,
            'size': size,
            'page': page
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Not Found', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded

    def reloadly_airtime_operator_autodetect(self,
                                             accept,
                                             authorization,
                                             phone,
                                             countryisocode,
                                             countrycode,
                                             suggested_amounts=None,
                                             suggested_amounts_map=None):
        """Does a GET request to /operators/auto-detect/phone/{phone}/countries/{countrycode}.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here. Example:
                application/com.reloadly.topups-v1+json
            authorization (string): TODO: type description here.
            phone (string): The mobile number whose details are to be
                retrieved.
            countryisocode (string): The ISO code of the country where the
                mobile number is registered.
            countrycode (string): TODO: type description here.
            suggested_amounts (bool, optional): Indicates if this field should
                be returned as a response. Default value is false.
            suggested_amounts_map (bool, optional): Indicates if this field
                should be returned as a response. Default value is false.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/operators/auto-detect/phone/{phone}/countries/{countrycode}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'phone': {'value': phone, 'encode': True},
            'countryisocode': {'value': countryisocode, 'encode': True},
            'countrycode': {'value': countrycode, 'encode': True}
        })
        _query_builder = self.config.get_base_uri(Server.AIRTIME)
        _query_builder += _url_path
        _query_parameters = {
            'suggestedAmounts': suggested_amounts,
            'suggestedAmountsMap': suggested_amounts_map
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Country code must be 2 characters ISO-Alpha-2 country code. See https://www.iban.com/country-codes', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded

    def reloadly_airtime_operator_by_id(self,
                                        accept,
                                        authorization,
                                        operatorid):
        """Does a GET request to /operators/{operatorid}.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here. Example:
                application/com.reloadly.topups-v1+json
            authorization (string): TODO: type description here.
            operatorid (string): The operator's identification number.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/operators/{operatorid}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'operatorid': {'value': operatorid, 'encode': True}
        })
        _query_builder = self.config.get_base_uri(Server.AIRTIME)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Operator not found for given id', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded

    def reloadly_airtime_operator_by_iso(self,
                                         accept,
                                         authorization,
                                         countrycode,
                                         include_bundles,
                                         suggested_amounts_map=None,
                                         suggested_amounts=None,
                                         include_pin=None,
                                         include_data=None):
        """Does a GET request to /operators/countries/{countrycode}.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here. Example:
                application/com.reloadly.topups-v1+json
            authorization (string): TODO: type description here.
            countrycode (string): The ISO code of the country where the
                operator is registered.
            include_bundles (bool): Indicates if any airtime and data bundles
                being offered by the operator should be returned as a
                response. Default value is true.
            suggested_amounts_map (bool, optional): Indicates if this field
                should be returned as a response. Default value is false.
            suggested_amounts (string, optional): Indicates if this field
                should be returned as a response. Default value is false.
            include_pin (bool, optional): Indicates if PIN details if
                applicable to the operator, should be returned as a response.
                Default value is true.
            include_data (bool, optional): Indicates if any data plans being
                offered by the operator should be returned as a response.
                Default value is true.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/operators/countries/{countrycode}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'countrycode': {'value': countrycode, 'encode': True}
        })
        _query_builder = self.config.get_base_uri(Server.AIRTIME)
        _query_builder += _url_path
        _query_parameters = {
            'Authorization': authorization,
            'includeBundles': include_bundles,
            'suggestedAmountsMap': suggested_amounts_map,
            'suggestedAmounts': suggested_amounts,
            'includePin': include_pin,
            'includeData': include_data
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Country not found and/or not currently supported', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded
