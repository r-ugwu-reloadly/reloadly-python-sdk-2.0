# -*- coding: utf-8 -*-

"""
reloadlysdk

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

from reloadlysdk.api_helper import APIHelper
from reloadlysdk.configuration import Server
from reloadlysdk.controllers.base_controller import BaseController
from reloadlysdk.exceptions.api_exception import APIException


class AirtimeNumberLookupController(BaseController):

    """A Controller to access Endpoints in the reloadlysdk API."""
    def __init__(self, config):
        super(AirtimeNumberLookupController, self).__init__(config)

    def reloadly_number_lookup_get(self,
                                   accept,
                                   authorization,
                                   phone,
                                   countrycode,
                                   suggested_amounts_map=None,
                                   suggested_amounts=None):
        """Does a GET request to /operators/mnp-lookup/phone/{phone}/countries/{countrycode}.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here.
            authorization (string): TODO: type description here.
            phone (int): This is the mobile number whose details are to be
                retrieved.
            countrycode (string): This is the ISO code of the country where
                the mobile number is registered.
            suggested_amounts_map (string, optional): Indicates if this field
                should be returned as a response. Default value is false.
            suggested_amounts (string, optional): Indicates if this field
                should be returned as a response. Default value is false.

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/operators/mnp-lookup/phone/{phone}/countries/{countrycode}'
        _url_path = APIHelper.append_url_with_template_parameters(_url_path, {
            'phone': {'value': phone, 'encode': True},
            'countrycode': {'value': countrycode, 'encode': True}
        })
        _query_builder = self.config.get_base_uri(Server.AIRTIME)
        _query_builder += _url_path
        _query_parameters = {
            'suggestedAmountsMap': suggested_amounts_map,
            'suggestedAmounts': suggested_amounts
        }
        _query_builder = APIHelper.append_url_with_query_parameters(
            _query_builder,
            _query_parameters
        )
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization
        }

        # Prepare and execute request
        _request = self.config.http_client.get(_query_url, headers=_headers)
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Not Found', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded

    def reloadly_number_lookup_post(self,
                                    accept,
                                    authorization,
                                    content_type,
                                    body):
        """Does a POST request to /mnp-lookup/operators.

        TODO: type endpoint description here.

        Args:
            accept (string): TODO: type description here.
            authorization (string): TODO: type description here.
            content_type (string): TODO: type description here.
            body (object): Request Payload

        Returns:
            mixed: Response from the API.

        Raises:
            APIException: When an error occurs while fetching the data from
                the remote API. This exception includes the HTTP Response
                code, an error message, and the HTTP body that was received in
                the request.

        """

        # Prepare query URL
        _url_path = '/mnp-lookup/operators'
        _query_builder = self.config.get_base_uri(Server.AIRTIME)
        _query_builder += _url_path
        _query_url = APIHelper.clean_url(_query_builder)

        # Prepare headers
        _headers = {
            'Accept': accept,
            'Authorization': authorization,
            'Content-Type': content_type
        }

        # Prepare and execute request
        _request = self.config.http_client.post(_query_url, headers=_headers, parameters=APIHelper.json_serialize(body))
        _response = self.execute_request(_request)

        # Endpoint and global error handling using HTTP status codes.
        if _response.status_code == 401:
            raise APIException('Full authentication is required to access this resource', _response)
        elif _response.status_code == 404:
            raise APIException('Not Found', _response)
        self.validate_response(_response)
        if (_response.text is not None) or (not str(_response.text)):
            decoded = APIHelper.json_deserialize(_response.text)

        return decoded
